openapi: 3.0.3
info:
  title: BIOME API Documention
  description: "This is the API Documentation for BIOME. BIOME is a new social media\
    \ platform designed around a fluid, less formal posting heiarchy, but with themes\
    \ and distinctions similar to dedicated forums. The idea is to promote natural\
    \ conversation about structured topics.  "
  termsOfService: http://swagger.io/terms/
  contact:
    email: BIOMEdia@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Biome
  url: http://swagger.io
servers:
- url: https://petstore3.swagger.io/api/v3
tags:
- name: post
  description: Operations about posts.
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: community
  description: Access to BIOME features for communities.
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
- name: user
  description: Operations about user
paths:
  /post:
    put:
      tags:
      - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      requestBody:
        description: Update an existing post on the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Invalid ID supplied
        "404":
          description: Post not found
        "405":
          description: Validation exception
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
    post:
      tags:
      - post
      summary: Add a new post to the server
      description: Add a new post to the server
      operationId: addPost
      requestBody:
        description: Create a new post in the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        "405":
          description: Invalid input
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
  /post/{postId}:
    get:
      tags:
      - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: ID of post to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        "400":
          description: Invalid ID supplied
        "404":
          description: Post not found
      security:
      - api_key: []
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
    post:
      tags:
      - post
      summary: Updates a post in the store with form data
      description: ""
      operationId: updatePostWithForm
      parameters:
      - name: postId
        in: path
        description: ID of post that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: Name of pet that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: Status of pet that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "405":
          description: Invalid input
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
    delete:
      tags:
      - post
      summary: Deletes a post
      description: delete a post
      operationId: deletePost
      parameters:
      - name: api_key
        in: header
        description: ""
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: postId
        in: path
        description: Post id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
  /post/{postId}/uploadImage:
    post:
      tags:
      - post
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
      - name: postId
        in: path
        description: ID of post to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
  /post/{postId}/share:
    post:
      tags:
      - post
      summary: uploads an image
      description: ""
      operationId: sharePost
      parameters:
      - name: postId
        in: path
        description: ID of post to share
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
  /post/{postId}/like:
    post:
      tags:
      - post
      summary: uploads an image
      description: ""
      operationId: likePost
      parameters:
      - name: postId
        in: path
        description: ID of post to share
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
  /post/{postId}/unlike:
    post:
      tags:
      - post
      summary: uploads an image
      description: ""
      operationId: unlikePost
      parameters:
      - name: postId
        in: path
        description: ID of post to share
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - biome_auth:
        - write:posts
        - read:posts
      x-swagger-router-controller: Post
  /community:
    post:
      tags:
      - community
      summary: create new community
      description: creates a new community based on user input
      operationId: makeCom
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                x-content-type: application/json
      x-swagger-router-controller: Community
  /community/posts/{comId}:
    get:
      tags:
      - community
      summary: Get the posts from a specific community based on ID.
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getComPosts
      parameters:
      - name: comId
        in: path
        description: ID of community that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
            application/xml:
              schema:
                $ref: '#/components/schemas/Community'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      x-swagger-router-controller: Community
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: User
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
  /user/{username}/posts:
    get:
      tags:
      - user
      summary: Get posts by username
      description: ""
      operationId: getUserPosts
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
  /user/{username}/info:
    get:
      tags:
      - user
      summary: Gets info of specified account
      description: ""
      operationId: getUserInfo
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        suscribedComs:
          type: array
          xml:
            wrapped: true
          items:
            type: integer
            format: int64
            xml:
              name: suscribedComs
      example:
        firstName: John
        lastName: James
        password: "12345"
        userStatus: 1
        phone: "12345"
        id: 10
        suscribedComs:
        - 0
        - 0
        email: john@email.com
        username: theUser
      xml:
        name: user
    Post:
      required:
      - content
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        content:
          type: string
          example: The old Ben and Jerry's was better.
        likeNum:
          type: integer
          format: int64
          example: 22
        timestamp:
          type: string
          example: 09:03:02 May 4th 2023
        userId:
          type: integer
          format: int64
          example: 211331
        comId:
          type: integer
          format: int64
          example: 211331
        parentPostId:
          type: integer
          format: int64
          example: 211331
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        id: 10
        comId: 211331
        parentPostId: 211331
        userId: 211331
        content: The old Ben and Jerry's was better.
        likeNum: 22
        timestamp: 09:03:02 May 4th 2023
      xml:
        name: post
    Community:
      required:
      - comAdmin
      - comDescription
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        comDescription:
          type: string
          example: "In this community, you must post in iambic pentameter"
        comAdmin:
          type: object
      example:
        comAdmin: {}
        id: 10
        comDescription: "In this community, you must post in iambic pentameter"
      xml:
        name: Community
    Rules:
      required:
      - id
      - ruleValue
      properties:
        id:
          type: integer
          format: int64
          example: 10
        ruleValue:
          type: string
          example: fill in later
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
      xml:
        name: '##default'
  requestBodies:
    Post:
      description: A post object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
        application/xml:
          schema:
            $ref: '#/components/schemas/Post'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    biome_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:posts: modify posts in your account
            read:posts: read posts
    api_key:
      type: apiKey
      name: api_key
      in: header
